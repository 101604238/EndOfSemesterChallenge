/*
Deployment script for GrapeVineDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar LoadTestData "false"
:setvar DatabaseName "GrapeVineDatabase"
:setvar DefaultFilePrefix "GrapeVineDatabase"
:setvar DefaultDataPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT\GrapeVineProject"
:setvar DefaultLogPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT\GrapeVineProject"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Creating [dbo].[Bookings]...';


GO
CREATE TABLE [dbo].[Bookings] (
    [clientID]   INT           NOT NULL,
    [tourName]   NVARCHAR (50) NOT NULL,
    [eventDate]  DATE          NOT NULL,
    [payment]    MONEY         NOT NULL,
    [dateBooked] DATE          NOT NULL,
    CONSTRAINT [PK_Bookings] PRIMARY KEY CLUSTERED ([clientID] ASC, [tourName] ASC, [eventDate] ASC)
);


GO
PRINT N'Creating [dbo].[Clients]...';


GO
CREATE TABLE [dbo].[Clients] (
    [clientID]     INT           NOT NULL,
    [clientFName]  NVARCHAR (50) NOT NULL,
    [clientSName]  NVARCHAR (50) NOT NULL,
    [clientGender] CHAR (1)      NOT NULL,
    PRIMARY KEY CLUSTERED ([clientID] ASC)
);


GO
PRINT N'Creating [dbo].[TourEvents]...';


GO
CREATE TABLE [dbo].[TourEvents] (
    [tourName]  NVARCHAR (50) NOT NULL,
    [eventDate] DATE          NOT NULL,
    [eventFee]  MONEY         NOT NULL,
    CONSTRAINT [PK_TourEvents] PRIMARY KEY CLUSTERED ([tourName] ASC, [eventDate] ASC)
);


GO
PRINT N'Creating [dbo].[Tours]...';


GO
CREATE TABLE [dbo].[Tours] (
    [tourName]        NVARCHAR (50)  NOT NULL,
    [tourDescription] NVARCHAR (200) NOT NULL,
    PRIMARY KEY CLUSTERED ([tourName] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Bookings_ClientID]...';


GO
ALTER TABLE [dbo].[Bookings] WITH NOCHECK
    ADD CONSTRAINT [FK_Bookings_ClientID] FOREIGN KEY ([clientID]) REFERENCES [dbo].[Clients] ([clientID]);


GO
PRINT N'Creating [dbo].[FK_TourEventsTourName]...';


GO
ALTER TABLE [dbo].[Bookings] WITH NOCHECK
    ADD CONSTRAINT [FK_TourEventsTourName] FOREIGN KEY ([tourName], [eventDate]) REFERENCES [dbo].[TourEvents] ([tourName], [eventDate]);


GO
PRINT N'Creating [dbo].[FK_TourEvents_TourName]...';


GO
ALTER TABLE [dbo].[TourEvents] WITH NOCHECK
    ADD CONSTRAINT [FK_TourEvents_TourName] FOREIGN KEY ([tourName]) REFERENCES [dbo].[Tours] ([tourName]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF '$(LoadTestData)' = 'true'

BEGIN 

DELETE FROM Bookings;
DELETE FROM TourEvents;
DELETE FROM Tours;
DELETE FROM Clients;

INSERT INTO Clients(clientID, clientFName, clientSName, clientGender) VALUES
	(1, 'Taylor', 'Price', 'M'),
	(2, 'Ellyse', 'Gamble', 'F'),
	(3, 'Tilly', 'Tan', 'F');

INSERT INTO Tours(tourName, tourDescription) VALUES	
	('West', 'Tour of wineries and outlets of the Geelong and Otways region'),
	('East', 'Tour of wineries and outlets of the Yarra Valley'),
	('South', 'Tour of wineries and outlets of Mornington Penisula'),
	('North', 'Tour of wineries and outlets of the Bedigo and Castlemaine region');

INSERT INTO TourEvents(tourName, eventDate, eventFee) VALUES
	('North', CONVERT(DATE, '9/1/2016', 103), $200.00),
	('North', CONVERT(DATE, '13/2/2016', 103), $225.00),
	('South', CONVERT(DATE, '16/1/2016', 103), $200.00),
	('West', CONVERT(DATE, '29/1/2016', 103), $225.00);
	
INSERT INTO Bookings(clientID, tourName, eventDate, payment, dateBooked) VALUES
	(1, 'North', CONVERT(DATE, '9/1/2016', 103), $200.00, CONVERT(DATE, '10/12/2015', 103)),
	(2, 'North', CONVERT(DATE, '9/1/2016', 103), $200.00, CONVERT(DATE, '16/12/2015', 103)),
	(1, 'North', CONVERT(DATE, '13/2/2016', 103), $225.00, CONVERT(DATE, '8/1/2016', 103)),
	(2, 'North', CONVERT(DATE, '13/2/2016', 103), $225.00, CONVERT(DATE, '14/1/2016', 103)),
	(3, 'North', CONVERT(DATE, '13/2/2016', 103), $225.00, CONVERT(DATE, '3/2/2016', 103)),
	(1, 'South', CONVERT(DATE, '16/1/2016', 103), $200.00, CONVERT(DATE, '10/12/2015', 103)),
	(2, 'South', CONVERT(DATE, '16/1/2016', 103), $200.00, CONVERT(DATE, '18/12/2015', 103)),
	(3, 'South', CONVERT(DATE, '16/1/2016', 103), $200.00, CONVERT(DATE, '9/1/2016', 103)),
	(2, 'West', CONVERT(DATE, '29/1/2016', 103), $200.00, CONVERT(DATE, '17/12/2015', 103)),
	(3, 'West', CONVERT(DATE, '29/1/2016', 103), $200.00, CONVERT(DATE, '18/12/2015', 103));
	
END;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Bookings] WITH CHECK CHECK CONSTRAINT [FK_Bookings_ClientID];

ALTER TABLE [dbo].[Bookings] WITH CHECK CHECK CONSTRAINT [FK_TourEventsTourName];

ALTER TABLE [dbo].[TourEvents] WITH CHECK CHECK CONSTRAINT [FK_TourEvents_TourName];


GO
PRINT N'Update complete.';


GO
